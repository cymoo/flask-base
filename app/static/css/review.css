@charset "UTF-8";
/*******************************
Output Style
*******************************/
#main {
  color: #fff;
  background-color: #000;
}

#main p {
  width: 10em;
}

#main {
  color: #fff;
  background-color: #000;
}

#main p {
  width: 10em;
}

#main {
  color: #fff;
  background-color: #000;
}

#main p {
  width: 10em;
}

/**********************************
Nested Rules
**********************************/
#main p {
  color: #333;
  width: 80%;
}
#main p .redbox {
  background-color: #fff;
  color: #555;
}

a, #fake-links .link, #demo .overview .fakelink, #admin .overview .fakelink {
  font-weight: bold;
}
a:hover, #fake-links .link:hover, #demo .overview .fakelink:hover, #admin .overview .fakelink:hover {
  text-decoration: none;
}
body.firefox a, body.firefox #fake-links .link, #fake-links body.firefox .link, body.firefox #demo .overview .fakelink, #demo .overview body.firefox .fakelink, body.firefox #admin .overview .fakelink, #admin .overview body.firefox .fakelink {
  font-weight: normal;
}

#main {
  color: black;
}
#main-sidebar {
  border: 1px solid;
}

.funky {
  font-family: fantasy;
  font-size: 30em;
  font-weight: bold;
}

/**********************************
Variables
**********************************/
#main {
  width: 5em;
}

#main {
  width: 7rem;
}

#sidebar {
  width: 7rem;
}

/**********************************
Date Types
* numbers (1.2, 13, 10px)
* strings of text, with and without quotes ("foo", 'bar', baz)
* colors (blue, #fff, rgba(0,0,0,.7)
* booleans (true, false)
* nulls (null)
* list of values, separated by spaces or commas (1.5rem 1rem, Helvetica, Arial, sans-serif)
* maps from one value to another (key1: value1, key2: value2)
* function references
**********************************/
/**********************************
Operations
**********************************/
p {
  font: 10px/8px;
  width: 500px;
  width: 1;
  height: 250px;
  margin-left: 9px;
  font: italic bold 10px/8px;
}

p {
  color: #050709;
}

p {
  color: #020406;
}

p {
  color: rgba(255, 255, 0, 0.75);
}

p {
  cursor: e-resize;
}

p:before {
  content: "Foo Bar";
  font-family: sans-serif;
}

p {
  margin: 7px px auto;
}

p:before {
  content: "I ate 15 pies";
}

p:before {
  content: "I ate  pies!";
}

p {
  width: 7em;
}

p {
  color: red;
}

p {
  color: red;
}

p.foo {
  border-color: blue;
}

p {
  font: 12px/30px;
}

#main {
  content: "First content";
  new-content: "First time reference";
}

#main {
  content: "Non-null content";
}

/**********************************
@-Rules and Directives
**********************************/
/**********************************
@import
**********************************/
/**********************************
@media
**********************************/
.sidebar {
  width: 300px;
}
@media screen and (orientation: landscape) {
  .sidebar {
    width: 500px;
  }
}

@media screen and (orientation: landscape) {
  .sidebar {
    width: 500px;
  }
}

@media screen and (-webkit-min-device-pixel-ratio: 1.5) {
  .sidebar {
    width: 500px;
  }
}
/**********************************
@extend
**********************************/
.error, .seriousError {
  border: 1px #f00;
  background-color: #fdd;
}

.error.intrusion, .intrusion.seriousError {
  background-image: url("/image/hacked.png");
}

.seriousError {
  border-width: 3px;
}

a:hover, #fake-links .link:hover, #demo .overview .fakelink:hover, #admin .overview .fakelink:hover {
  text-decoration: underline;
}

a, #fake-links .link, #demo .overview .fakelink, #admin .overview .fakelink {
  color: blue;
}
a:hover, #fake-links .link:hover, #demo .overview .fakelink:hover, #admin .overview .fakelink:hover {
  text-decoration: underline;
}

#admin .tabbar a, #admin .tabbar #fake-links .link, #fake-links #admin .tabbar .link, #demo .overview #admin .tabbar .fakelink, #admin .tabbar .overview .fakelink, #admin .overview .tabbar .fakelink {
  font-weight: bold;
}

#admin .tabbar a, #admin .tabbar #fake-links .link, #fake-links #admin .tabbar .link, #demo .overview #admin .tabbar .fakelink, #admin .tabbar .overview .fakelink, #admin .overview .tabbar .fakelink {
  font-weight: bold;
}

#context #fake-links .link.notice, #fake-links #context .link.notice, #context #demo .overview .fakelink.notice, #demo .overview #context .fakelink.notice, #context #admin .overview .fakelink.notice, #admin .overview #context .fakelink.notice, #context a.notice, #context a.important, #context #fake-links .important.link, #fake-links #context .important.link, #context #demo .overview .important.fakelink, #demo .overview #context .important.fakelink, #context #admin .overview .important.fakelink, #admin .overview #context .important.fakelink {
  color: blue;
  font-weight: bold;
  font-size: 2em;
}

/*
Normally when you extend a selector, it's an error if that @extend doesn't work.
For example, if you write a.important {@extend .notice},
it's an error if there are no selectors that contain .notice.
It's also an error if the only selector containing .notice is h1.notice,
since h1 conflicts with a and so no new selector would be generated.
Sometimes, though, you want to allow an @extend not to produce any new selectors.
To do so, just add the !optional flag after the selector.
*/
/*
There are some restrictions on the use of @extend within directives such as @media.
Sass is unable to make CSS rules outside of the @media block apply to selectors inside it
without creating a huge amount of stylesheet bloat by copying styles all over the place.
This means that if you use @extend within @media (or other CSS directives),
you may only extend selectors that appear within the same directive block.
NOTE: 尽量不要使用此规则
 */
@media print {
  .page {
    width: 8in;
  }
}
.page {
  color: red;
}

/**********************************
@debug @warn @error
**********************************/
/*
 1. You can turn warnings off with the --quiet command-line option or the :quiet Sass option.
 2. A stylesheet trace will be printed out along with the message
    so that the user being warned can see where their styles caused the warning.
*/
/*
The @error directive throws the value of a SassScript expression as a fatal error
including a nice stack trace. It's useful for validating arguments to mixins and functions.
There is currently no way to catch errors.
*/
.bar {
  position: relative;
  left: 13px;
  top: 15px;
}

/*******************************
Control directives & expressions
*******************************/
/*
The @if directive takes a SassScript expression and uses the styles nested beneath it
if the expression returns anything other than false or null
You can explicitly test for $var == false or $var == null
if you want to distinguish between these.
*/
p {
  border: 1px solid;
}

p {
  color: green;
}

/*
The @for directive repeatedly outputs a set of styles. For each repetition,
a counter variable is used to adjust the output.
The directive has two forms: @for $var from <start> through <end> and @for $var from <start> to <end>.
please note the difference in the keywords through and to. $var can be any variable name, like $i;
<start> and <end> are SassScript expressions that should return integers.
When <start> is greater than <end> the counter will decrement instead of increment.

The @for statement sets $var to each successive number in the specified range
and each time outputs the nested styles using that value of $var.
For the form from ... through, the range includes the values of <start> and <end>,
but the form from ... to runs up to but not including the value of <end>.
*/
.item-1 {
  width: 2em;
}

.item-2 {
  width: 4em;
}

.item-3 {
  width: 6em;
}

/*
The @each directive usually has the form @each $var in <list or map>.
$var can be any variable name, like $length or $name,
and <list or map> is a SassScript expression that returns a list or a map.

The @each rule sets $var to each item in the list or map,
then outputs the styles it contains using that value of $var.
*/
.puma-icon {
  background-image: url("/images/puma.png");
}

.sea-slug-icon {
  background-image: url("/images/sea-slug.png");
}

.egret-icon {
  background-image: url("/images/egret.png");
}

.salamander-icon {
  background-image: url("/images/salamander.png");
}

/*
The @each directive can also use multiple variables, as in @each $var1, $var2, ... in <list>.
If <list> is a list of lists, each element of the sub-lists is assigned to the respective variable
*/
.puma-icon {
  background-image: url("/images/puma.png");
  border: 2px solid black;
  cursor: default;
}

.sea-slug-icon {
  background-image: url("/images/sea-slug.png");
  border: 2px solid blue;
  cursor: pointer;
}

.egret-icon {
  background-image: url("/images/egret.png");
  border: 2px solid white;
  cursor: move;
}

h1 {
  font-size: 2em;
}

h2 {
  font-size: 1.5em;
}

h3 {
  font-size: 1.2em;
}

/*
The @while directive takes a SassScript expression and repeatedly outputs the nested styles
until the statement evaluates to false.
This can be used to achieve more complex looping than the @for statement is capable of,
although this is rarely necessary.
*/
.item-6 {
  width: 12em;
}

.item-4 {
  width: 8em;
}

.item-2 {
  width: 4em;
}

/*******************************
@mixin
*******************************/
.baz {
  display: inline-block;
}
.baz:after {
  content: ".";
  display: block;
  height: 0;
  clear: both;
  visibility: hidden;
}
* html .baz {
  height: 1px;
}

a, #fake-links .link, #demo .overview .fakelink, #admin .overview .fakelink {
  color: blue;
  background-color: red;
}

p {
  border-color: blue;
  border-width: 3px;
  border-style: dashed;
}

p {
  border-color: blue;
  border-width: 1in;
  border-style: dashed;
}

h1 {
  border-color: blue;
  border-width: 2in;
  border-style: dashed;
}

p {
  border-color: blue;
  border-width: 1in;
  border-style: dashed;
}

h1 {
  border-color: blue;
  border-width: 2in;
  border-style: dashed;
}

/*
arguments at the end of a mixin or function declaration
that take all leftover arguments and package them up as a list.
These arguments look just like normal arguments, but are followed by ...
*/
.shadows {
  -moz-box-shadow: 0 4px 5px #666, 2px 6px 10px #999;
  -webkit-box-shadow: 0 4px 5px #666, 2px 6px 10px #999;
  box-shadow: 0 4px 5px #666, 2px 6px 10px #999;
}

/*
you can expand a list of values so that each value is passed as a separate argument,
or expand a map of values so that each pair is treated as a keyword argument.
*/
.primary {
  color: #ff0000;
  background-color: #00ff00;
  border-color: #0000ff;
}

.secondary {
  color: #00ff00;
  background-color: #0000ff;
  border-color: #ff0000;
}

/*
You can use variable arguments to wrap a mixin and add additional styles
without changing the argument signature of the mixin.
If you do, keyword arguments will get directly passed through to the wrapped mixin.
NOTE: 类似于Python的被装饰的函数
*/
/*
It is possible to pass a block of styles to the mixin for placement
within the styles included by the mixin.
The styles will appear at the location of any @content directives found within the mixin.
This makes it possible to define abstractions relating to the construction of selectors
and directives.
when the @content directive is specified more than once or in a loop,
the style block will be duplicated with each invocation.
The content-exists() function will return true when a content block
is passed to the current mixin and can be used to implement such behaviors.
NOTE: 具体使用场景？
*/
* html #logo {
  background-image: url("/logo.gif");
}

/*
The block of content passed to a mixin are evaluated in the scope
where the block is defined, not in the scope of the mixin.
This means that variables local to the mixin cannot be used within the passed style block
and variables will resolve to the global value.
NOTE: 词法作用域
*/
.colors {
  background-color: blue;
  color: white;
  border-color: blue;
}

/*******************************
Function Directives
*******************************/
/*
It is recommended that you prefix your functions to avoid naming conflicts and
so that readers of your stylesheets know they are not part of Sass or CSS.
*/
#sidebar {
  width: 240px;
}

/*# sourceMappingURL=review.css.map */
